// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Character {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  names         Json
  canonicalName String
  otherNames    String[]
  description   String
  image         String

  animeId String @db.ObjectId
  anime  Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model Episode {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  originalTitle String
  title         String
  season        Int
  number        Int
  thumbnail     String

  animeId String @db.ObjectId
  anime  Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model Review {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  likesCount      Int
  rating          Int
  source          String
  user_id         String
  user_name       String
  user_avatar     String
  user_coverImage String

  animeId String @db.ObjectId
  anime  Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
}

model Genre {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Anime {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  synopsis       String
  userCount      Int
  favoritesCount Int
  popularityRank Int
  ratingRank     Int
  startDate      DateTime?
  endDate        DateTime?
  posterImage    String?
  coverImage     String?
  episodeCount   Int?
  episodeLength  Int?
  characters     Character[]
  genres         String[]
  episodes       Episode[]
  reviews        Review[]
  tags           String[]
}
